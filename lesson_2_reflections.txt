What happens when you initialize a repository? Why do you need to
do it?
When you initialize a repo it creates the necessary meta-data files
that will hold history and branch information.  We need to initialize
in order to create those things so git can update on commit.

How is the staging area different from the working directory and the
repository? What value do you think it offers?
The staging area is where you place things that will go into a 
single commit, while the working directory is the native file system, and 
the repository is where the commits end up.  The staging area allows you
to commit multiple files at one time.

How can you use the staging area to make sure you have one commit per logical change?
By adding multiple files you can bundle them into the same commit, allowing 
a logical change to include information in more than just one file.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
You can name brances to be human readable, allowing one to keep the new or 
experimental features straight.  Branches help by allowing the coder to try new
things while keeping a working version in tact.

How do the diagrams help you visualize the branch structure?
By showing which commits are reachable from which branches, one can see
how current progress can be stored and accessed.

What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?
Merging two branches incorporates the code from the two branches into one 
file.  The diagram is such to show parent-child relationships and reachability.